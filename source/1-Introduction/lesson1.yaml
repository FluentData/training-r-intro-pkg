title: "Introduction to R"
metadata:
  author: "Fluent Data, LLC"
  date: "`r Sys.Date()`"
  tutorial:
    id: "training.r.intro.1"
    version: 1.0
  description: "This lesson provides a basic introduction to R programming for air quality data science, covering installation, basic operations, and data structures."
lesson:
  number: 1
  id: 1-Introduction
  next: 2-Functions-and-Importing-Data
introduction: |
  This lesson is a part of the Introduction to R for Air Quality Data Science. The sections below provide a basic introduction to R, including how to install and set up R and RStudio, an overview of R syntax, and how to perform simple operations.
content:
  - type: section
    title: What is R?
    content:
      - type: paragraph
        content: |
          R is a free, open-source computing language. It was originally written by statisticians for doing statistical analysis in academia. In recent years it has become more widely used in many industries for performing a variety of data science tasks such as:
      - type: list
        bullets:
          - reading and writing files,
          - data transformation,
          - graphic visualization,
          - geographic mapping,
          - and predictive modeling.
  - type: section
    title: Why Use a Programming Language?
    content:
      - type: paragraph
        content: |
          R is one of several programming languages that can be used for data science, including [Python](https://www.python.org/) and
          [Julia](https://julialang.org/). They each have advantages and disadvantages, but they are all powerful tools for data science.
          These [high-level languages](https://en.wikipedia.org/wiki/High-level_programming_language) give you access to modern algorithms
          for processing large amounts of data in a few lines of code.
      - type: paragraph
        content: |
          Many data analysis tasks can be accomplished with spreadsheets and other business intelligence (BI) tools such as Looker and Power
          BI. When should you move beyond BI tools and use a high-level programming language like R? Below are a few scenarios where a language
          like R is more advantageous than a BI tool.
      - type: list
        bullets:
          - If you cannot access data easily in your BI tool, R can read just about any data source.
          - If you need to save a large number of files, R can automate that process in a way that BI tools cannot.
          - Custom data transformations that are not possible in BI tools can be done with R.
          - Custom data visualizations that are not available in BI tools can be done with R.
          - Predictive modeling that is not available in BI tools, or only in a rudimentary way, can be done in R.
  - type: section
    title: Install R and RStudio
    skip:
      - learnr
    content:
      - type: paragraph
        content: |
          This section covers the two pieces of software you need to download. R is the core software that must be installed. RStudio is a nice
          integrated development environment (IDE) that makes it much easier to use R.
      - type: paragraph
        content: |
          To download R, [see this page](https://cran.r-project.org/). You will need to select the version that is compatible with your operating
          system (PC or Mac). Accept the default options during the installation.
      - type: paragraph
        content: |
          Once you have installed R, you can open the program itself. On PC, if you have selected the desktop shortcut during installation, the R icon
          will look like this:
      - type: image
        src: "./images/r_icon.png"
        alt: "R icon"
      - type: paragraph
        content: |
          Once opened, the R console looks very plain.
      - type: image
        src: "./images/r_console.png"
        alt: "R console"
      - type: paragraph
        content: |
          RStudio makes R much more user friendly. It's free and can be downloaded from the [Posit website](https://posit.co/download/rstudio-desktop/).
          Accept the defaults during installation. It's not necessary to open RStudio to use R, but in these sessions we will assume that RStudio is your
          interface to R.
      - type: paragraph
        content: |
          On a PC, the RStudio desktop icon looks like this:
      - type: image
        src: "./images/rstudio_icon.png"
        alt: "RStudio icon"
      - type: paragraph
        content: |
          When you first open RStudio, this is what you see:
      - type: image
        src: "./images/rstudio_interface.png"
        alt: "RStudio interface"
      - type: paragraph
        content: |
          The left panel is the console for R. Type `1 + 1` in the console then hit "Enter" and R will return the answer.
      - type: image
        src: "./images/rstudio_calculation.png"
        alt: "RStudio console with calculation"
      - type: paragraph
        content: |
          It's a good idea to use a script so you can save your code. Open a new script by selecting "File" -> "New File" -> "R Script" and it will appear
          in the top left panel of RStudio.
      - type: image
        src: "./images/rstudio_new_script.png"
        alt: "New R script in RStudio"
      - type: paragraph
        content: |
          This is a text document that can be saved. Go to "File" -> "Save As" and you can save the file with a `.R` extension. You can type and run more
          than one line at a time by highlighting and clicking the "Run" button on the script tool bar.
      - type: image
        src: "./images/rstudio_run_script.png"
        alt: "Running a script in RStudio"
      - type: paragraph
        content: |
          The bottom right panel can be used to find and open files, view plots, load packages, and look at help pages. The top right panel gives you information
          about what variables you're working with during your R session.
  - type: section
    title: Basic Math
    content:
      - type: paragraph
        content: |
          Open up a script if you haven't already (“File” -> “New File” -> “R Script”). Try some math by either typing the lines below or copying and pasting
          the lines into your script.
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Practice Basic Math Operations"
        content: |
          10 + 5
          10 - 5
          10 * 5
          10 / 5
          10 ^ 5
      - type: paragraph
        content: |
          Remember, to run the lines, highlight your code and click the "Run" button on the toolbar of the script panel. Below is a table of the math operators
          in the R language.
      - type: table
        header:
          - "Operator"
          - "Meaning"
          - "Example"
        rows:
          -
            - "+"
            - "addition"
            - "2 + 2"
          -
            - "-"
            - "subtraction"
            - "2 - 2"
          -
            - "*"
            - "multiplication"
            - "2 * 2"
          -
            - "/"
            - "division"
            - "2 / 2"
          -
            - "^"
            - "exponentiation"
            - "2 ^ 2"
      - type: section
        title: Order of Operations
        content:
          - type: paragraph
            content: |
              R follows the usual order of arithmetical operations and uses parentheses for grouping operations. Run the two lines of code below and you can
              see the different values that are returned.
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.cap: "Understanding Order of Operations"
            content: |
              10 - 3 / 5
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.cap: "Practicing Grouping with Parentheses"
            content: |
              (10 - 3) / 5
  - type: section
    title: Note on Comments and Code Blocks
    content:
      - type: paragraph
        content: |
          To write a comment in your script that will not be evaluated, type `#` in front of your comment. The text after `#` will not be evaluated. There is
          no multi-line commenting in R, so every comment line must begin with the `#` character.
      - type: paragraph
        content: |
          Run all of the code below and see what gets returned in the R console (bottom left panel in RStudio).
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.cap: "Experiment with Comments"
        content: |
          # Full line comment
          5^2 # partial line comment
      - type: paragraph
        content: |
          In the example above and the previous section, you have seen the R code and its output. The code blocks with output look like this, with `1+1` being
          the R code and `## [1] 2` being the output:
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.cap: "Code and Output Example"
        content: |
          1+1
      - type: paragraph
        content: |
          However, in the R console the code and output would look like this:
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.cap: "Console Code Execution"
        content: |
          1 + 1
  - type: section
    title: Variables
    content:
      - type: paragraph
        content: |
          A variable is a letter or combination of alphanumeric characters that is used to store data. To create a variable in R, use the less-than character
          with the dash to create an arrow symbol pointing left `<-`. Below, the variables `x` and `y` are created by assigning some numbers to them.
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.cap: "Creating Variables"
        content: |
          x <- 10
          y <- 5
          x + y
      - type: paragraph
        content: |
          In RStudio, you will see the variables we created in the top right panel.
      - type: image
        src: "./images/rstudio_variables.png"
        alt: "Variables in RStudio"
      - type: paragraph
        content: |
          If you've already created a variable, you can replace the value with another value.
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.cap: "Exploring Variable Assignment"
        content: |
          x
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.cap: "Updating Variable Values"
        content: |
          x <- 20
          x
      - type: paragraph
        content: |
          In the top right panel you can see that the number stored in the variable `x` has changed.
      - type: image
        src: "./images/rstudio_updated_variable.png"
        alt: "Updated variable in RStudio"
      - type: paragraph
        content: |
          There are 3 important rules to remember when creating variable names:
      - type: list
        numbers:
          - You can't start your variable with a number.
          - You can't use spaces or special characters ($,%,#,-). Periods `.` and underscores  `_` are ok.
          - Capitalization __DOES__ matter in R. That is, R will consider `x` and  `X` to be different variables.
      - type: paragraph
        content: |
          Try running the following code and you will see that in your global environment there are two different objects listed.
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.cap: "Variable Naming Rules"
        content: |
          x <- 5
          X <- 5
  - type: section
    title: Data Types
    content:
      - type: paragraph
        content: |
          R has three main data types:
      - type: table
        header:
          - "Type"
          - "Description"
          - "Examples"
        rows:
          -
            - "character"
            - "letters and words"
            - "`z`, `red`, `H2O`"
          -
            - "numeric"
            - "numbers"
            - "`1`, `3.14`, `log(10)`"
          -
            - "logical"
            - "binary"
            - "`TRUE`, `FALSE`"
      - type: paragraph
        content: |
          The `character` type requires single or double quotes. The logical values
          `TRUE` and `FALSE` should not be quoted and require full caps.
  - type: section
    title: Grouping Data
    content:
      - type: paragraph
        content: |
          There are several ways to group data to make them easier to work with:
      - type: list
        bullets:
          - A __vector__ stores multiple values of the same type (e.g. all numeric values).
          - A __list__ stores multiple values of different types (e.g. some numbers and character values).
          - A __matrix__ is a table of values with only one data type.
          - A __data frame__ is a table of values that can have columns with different data types (e.g. a numeric column and a logical column).
      - type: section
        title: Vectors
        content:
          - type: paragraph
            content: |
              A vector variable can contain only one type of data (numeric, character, or logical). We use `c()` to create vectors.
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.cap: "Creating Numeric Vectors"
            content: |
              x <- c(1, 2, 3, 4, 5)
              x
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.cap: "Creating Character Vectors"
            content: |
              fruit <- c("apples", "bananas", "oranges")
              fruit
          - type: paragraph
            content: |
              If you try to type in text without using quotations marks for character values (either single or double quotes), then R will throw an error. Try
              running the code below.
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.cap: "Error Without Quotes"
            content: |
              fruit <- c(apples, bananas, oranges)
          - type: paragraph
            content: |
              R will interpret the text without quotes as the names of variables. Since we don't have any variables named `apples`, `bananas`, or `oranges`, R can't
              find them and it returns an error. The members of a vector can be accessed by using single brackets `[ ]`. For example, to print the 3rd member of the
              `fruit` vector, you can use the single bracket with the number 3:
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.cap: "Accessing Vector Elements"
            content: |
              fruit[3]
      - type: section
        title: Lists
        content:
          - type: paragraph
            content: |
              Lists are like vectors but can contain any mix of data types. We use `list()` to create a list variable.
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.cap: "Creating Lists"
            content: |
              x <- list("Benzene", 1.3, TRUE)
              x
          - type: paragraph
            content: |
              When a list is printed to the console, you will see double brackets `[[ ]]` with the index number inside. In the example above, the numeric value `1.3`
              is the second value in the list, so it is shown below the double bracket `[[2]]`. You can access the second value by using the double brackets on the
              list.
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.cap: "Accessing List Elements"
            content: |
              x[[2]]
          - type: paragraph
            content: |
              Lists can also contain vectors and other lists.
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.cap: "Lists Containing Vectors and Lists"
            content: |
              my_vector <- c(1, 2, 3)
              my_list <- list("Benzene", 1.3, TRUE)
              y <- list(TRUE, my_vector, my_list)
              y
          - type: paragraph
            content: |
              In this example, you can use two double brackets to access the value `1.3` by selecting the 3rd member of the list `y` and the 2nd member of the list
              `my_list`:
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.cap: "Nested List Access"
            content: |
              y[[3]][[2]]
      - type: section
        title: Data Frames
        content:
          - type: paragraph
            content: |
              Data frames are data tables in R. We use `data.frame()` to create a data frame of vectors of the same length. In the example below, we create three
              vectors of the same length and use them to create a data frame.
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.cap: "Creating Data Frames"
            content: |
              pollutant <- c("Benzene", "Toluene", "Xylenes")
              concentration <- c(1.3, 5.5, 6.0)
              carcinogen <- c(TRUE, FALSE, FALSE)
              my_data_frame <- data.frame(pollutant, concentration, carcinogen)
              my_data_frame
          - type: paragraph
            content: |
              The output above shows a table with the vector variable names as column names, and the vector values below the respective column name. If you try to
              create a data frame where the vectors are not all the same length, you will see the error shown below.
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.cap: "Data Frame Dimension Mismatch Error"
            content: |
              pollutant <- c("Benzene", "Toluene")
              concentration <- c(1.3, 5.5, 6.0)
              carcinogen <- c(TRUE, FALSE, FALSE)
              my_data_frame <- data.frame(pollutant, concentration, carcinogen)
  - type: section
    title: Further Reading
    content:
      - type: paragraph
        content: |
          * For a comprehensive introduction to data science using R, see
          [R For Data Science, 2nd Edition](https://r4ds.hadley.nz/).
          * For a good introduction to R programming, see
          [Hands on R Programming](https://rstudio-education.github.io/hopr/).
exercises:
  - instructions: "Add 25 and 75 in R."
    hints:
      - "# You can add two numbers directly using the `+` operator."
      - "# Simply type `25 + 75` in the R console to perform the addition."
    solution:
      explanation: |
        R allows you to do simple arithmetic operations such as addition, subtraction, multiplication, etc. directly. Here, we're simply adding two numbers to get their sum.
      code: |
        25 + 75
  - instructions: "Create an R variable `x` that stores the value 10."
    hints:
      - "# Use the assignment operator `<-` to assign a value to a variable."
      - "# To create a variable `x` with the value 10, use `x <- 10`."
    solution:
      explanation: |
        The arrow symbol (`<-`) is used to assign a value to a variable in R. Here, we assign the value 10 to the variable `x`.
      code: |
        x <- 10
  - instructions: "Create a vector `v` that contains the numbers 1 through 5."
    hints:
      - "# Use the `c()` function to combine multiple values into a vector."
      - "# You can create a vector of consecutive numbers using `c(1, 2, 3, 4, 5)` or the shorthand `1:5`."
    solution:
      explanation: |
        We use the `c()` function in R to combine elements into a vector. To create consecutive integers, you can also use the colon `:` operator, which is a convenient way to create sequences of numbers.
      code: |
        v <- c(1, 2, 3, 4, 5)
  - instructions: "Create a list `l` that contains a number (e.g., 5), a string (e.g., 'apple'), and a logical value (e.g., TRUE)."
    hints:
      - "# Use the `list()` function to create a list that can contain elements of different types."
      - "# To create a list with a number, a string, and a logical value, you can use `list(5, 'apple', TRUE)`."
    solution:
      explanation: |
        In R, we create a list using the `list()` function. A list can contain elements of different types, such as numbers, strings, and logical values, allowing for flexible data structures.
      code: |
        l <- list(5, 'apple', TRUE)
  - instructions: "Create a data frame `df` with two columns, `name` and `age`, each containing three entries of your choosing."
    hints:
      - "# Use the `data.frame()` function to create a data frame."
      - "# To create a data frame with `name` and `age` columns, define each column as a vector and use them as arguments in the `data.frame()` function."
    solution:
      explanation: |
        In R, we can combine vectors of equal length into a data frame using the `data.frame()` function. Here, we're creating two vectors, `name` and `age`, and combining them into a data frame, demonstrating how to organize and structure data in a tabular format.
      code: |
        df <- data.frame(name = c('Alice', 'Bob', 'Charlie'), age = c(25, 32, 28))
  - instructions: "Create a numeric vector `nums` with the values 10, 20, and 30 and add 5 to each element of the vector."
    hints:
      - "# You can create a vector using the `c()` function."
      - "# You can create a vector using the `c()` function.\n`nums <- c(10, 20, 30)`"
      - "# To add a number to each element of a vector, you can simply use the `+` operator with the vector and the number."
      - "# To add a number to each element of a vector, you can simply use the `+` operator with the vector and the number.\n`nums + 5`"
    solution:
      explanation: |
        We can operate on every element of a vector at once in R. By creating a vector `nums` with `c(10, 20, 30)` and then adding 5 to it, we perform an element-wise addition, resulting in each element of the vector being increased by 5.
      code: |
        nums <- c(10, 20, 30)
        nums + 5
