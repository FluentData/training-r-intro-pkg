
title: "Functions and Importing Data"
metadata:
  author: Fluent Data, LLC
  date: "`r Sys.Date()`"
  description: |
    This lesson provides an overview of using functions in R, including built-in and package functions, and demonstrates how to import data
    from CSV and Excel files.
lesson:
  number: 2
  id: 2-Functions-and-Importing-Data
  next: 3-Subsetting-Sorting-and-Combining
packages:
  - EnvStats
introduction: |
  This lesson covers the use of functions in R, including built-in functions and functions from packages. It also discusses how to import
  data from CSV text files and Excel documents.
content:
  - type: section
    title: Functions
    content:
      - type: paragraph
        content: |
          In R, there are two main types of objects: variables and functions. We
          covered variables in the introductory lesson. A variable is used to create
          and reference data. The data can be a character, numeric, or logical data
          type. Variables can reference various "containers" for data, such as a
          __vector__, __list__, or __data frame__.
      - type: paragraph
        content: |
          Functions are similar to variables in that they are short names that reference something saved in R. In this case, a function is not referencing data but a piece of code. A function is saved code that can be used to do some operation on data.
      - type: paragraph
        content: |
          R has many built-in functions that perform common tasks. When you open RStudio you can immediately use a function called `mean( )`. Here is an example of using the `mean( )` function to find the average of a vector of integers. We first save a vector of integers in the `x` variable then put the variable inside the parentheses of the function.
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.lines: 5
          exercise.cap: "Calculate Mean"
        content: |
          x <- c(4, 8, 1, 14, 34)
          mean(x)
      - type: paragraph
        content: |
          As you would expect, R has many built-in math functions. Below are a few
          examples.
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.lines: 5
          exercise.cap: "Calculate Natural Logarithm"
        content: |
          log(27)  #Natural logarithm
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.lines: 5
          exercise.cap: "Calculate Base 10 Logarithm"
        content: |
          log10(100) #base 10 logarithm
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.lines: 5
          exercise.cap: "Calculate Square Root"
        content: |
          sqrt(225) # Square root
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.lines: 5
          exercise.cap: "Calculate Absolute Value"
        content: |
          abs(-5) #Absolute value
      - type: paragraph
        content: |
          All of the examples show that the general form is `function_name( )`. The name of the function should give you some clue as to what it does, and the `( )` is where you provide the data to the function.
      - type: paragraph
        content: |
          Many functions also have additional options you can choose, which are called the _arguments_. To see what needs to go inside `( )`, type a question mark in front of the function and run it in the R console.
      - type: code
        language: r
        options:
          eval: false
        content: |
          ?mean()
      - type: paragraph
        content: |
          In RStudio, you will see the help page for `mean()` in the bottom right corner panel.
      - type: image
        src: "images/rstudio_help.png"
        alt: "RStudio help page for the mean function"
      - type: paragraph
        content: |
          On the help page, under `Usage`, you see `mean(x, ...)`. This means that the only thing that necessarily has to go into `( )` is `x`. On the help page under `Arguments` you will find a description of what `x` needs to be: a numeric or logical vector.
      - type: paragraph
        content: |
          Many built-in functions in R have multiple arguments. This allows you
          to give the function some more information to perform calculation you
          want. The example below shows how to use the `digits` argument in the
          `round( )` function. Providing different values to the `digits` argument
          will return different values.
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.lines: 5
          exercise.cap: "Round to Zero Digits"
        content: |
          round(12.3456)
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.lines: 5
          exercise.cap: "Round to Three Digits"
        content: |
          round(12.3456, digits=3)
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.lines: 5
          exercise.cap: "Round to One Digit"
        content: |
          round(12.3456, digits=1)
      - type: paragraph
        content: |
          In the first example, you can see that we did not provide a value for the
          `digits` argument. That's because there is a default value `digits = 0` (see
          the `Usage` section on the help page `?round`). If there is a default value,
          then that argument does not need to be specified inside `( )`. If there is no
          default value for an argument, then the function will error and tell you that
          you forgot to supply a value for the argument.
  - type: section
    title: Useful Built-in Functions
    content:
      - type: paragraph
        content: |
          When you start an R session there are many built-in functions that are
          immediately available for you to use. Other functions are available in
          community developed packages, as explained in a later section of this
          lesson. Below is a list of a few commonly used built-in functions in R.
      - type: section
        title: "1. `sum( )`"
        content:
          - type: paragraph
            content: |
              Returns the sum of a vector of numeric values.
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.lines: 5
              exercise.cap: "Sum of Values"
            content: |
              sum(c(2.3, 7.5, 9, -10))
      - type: section
        title: "2. `min()`"
        content:
          - type: paragraph
            content: |
              Get the minimum value from a numeric vector.
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.lines: 5
              exercise.cap: "Minimum Value"
            content: |
              min(c(6, 9, 3, 11, -2))
      - type: section
        title: "3. `max()`"
        content:
          - type: paragraph
            content: |
              Get the maximum value from a numeric vector.
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.lines: 5
              exercise.cap: "Maximum Value"
            content: |
              max(c(15, 2, 8.3, -10, 21))
      - type: section
        title: "4. `seq()`"
        content:
          - type: paragraph
            content: |
              Create a numeric vector with a certain sequence. The example below creates a vector of integers from 1 to 5.
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.lines: 5
              exercise.cap: "Create Sequence with `seq()`"
            content: |
              seq(from = 1, to = 5, by = 1)
          - type: paragraph
            content: |
              Another way to create a sequence of integers is to use the colon.
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.lines: 5
              exercise.cap: "Create Sequence with Colon Operator"
            content: |
              1:5
      - type: section
        title: "5. `paste()`"
        content:
          - type: paragraph
            content: |
              Concatenate two or more strings.
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.lines: 5
              exercise.cap: "Concatenate Strings"
            content: |
              x <- "Hello"
              y <- "world!"
              paste(x, y, sep = " ")
          - type: paragraph
            content: |
              Any numbers will be converted to strings.
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.lines: 5
              exercise.cap: "Concatenate Strings with Numbers"
            content: |
              x <- "You're number "
              y <- 1
              z <- "!"
              paste(x, y, z, sep = "")
      - type: section
        title: "6. `substr()`"
        content:
          - type: paragraph
            content: |
              The `substr()` function allows you to pull out a section from a string based on the position of the characters in the string. This is useful for vectors of dates, addresses, monitor IDs, parameter descriptions, etc.
          - type: paragraph
            content: |
              For example, in AQS data a monitor ID may be written in the following format: [State code - County code - Site number - Parameter code - POC]. If we only wanted to pull out the site number for this monitor ID we could do the following:
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.lines: 5
              exercise.cap: "Extract Site Number"
            content: |
              wisconsin_monitor <- c('55-021-0015-44201-2')  # Ozone monitor in Columbia County, WI
              site_id <- substr(wisconsin_monitor, start = 8, stop = 11)  # start and stop position within the character string.
              site_id
          - type: exercise
            instructions: The `substr()` function can be used to pull out the county code from the `wisconsin_monitor` vector. See if you can do it.
            start_content: |
              wisconsin_monitor <- c('55-021-0015-44201-2')  # Ozone monitor in Columbia County, WI
              county_id <- substr(wisconsin_monitor, start = ___, stop = ___)
              county_id
            hint: R indexes start at 1 and are inclusive. Refer to the previous example to see how the `start` and `stop` arguments are used.
            solution: |
              wisconsin_monitor <- c('55-021-0015-44201-2')  # Ozone monitor in Columbia County, WI
              county_id <- substr(wisconsin_monitor, start = 4, stop = 6)
              county_id
            check: grade_this_code()
  - type: section
    title: Nesting functions
    content:
      - type: paragraph
        content: |
          R allows you to place a function inside another function to perform multiple tasks on data in one step.
      - type: paragraph
        content: |
          For instance, if you want to create a sequence of numbers and then take the mean of that sequence, you could either do it in a couple of steps, or all at once.
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.lines: 5
          exercise.cap: "Calculate Mean in Two Steps"
        content: |
          #Two steps
          x <- seq(from=1, to=10, by=3)
          mean(x)
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.lines: 5
          exercise.cap: "Calculate Mean in One Step"
        content: |
          #One step
          mean(seq(from=1, to=10, by=3))
      - type: paragraph
        content: |
          _Note: Typically you don’t want to have too many nested functions because it becomes difficult to read._
  - type: section
    title: NA Values
    content:
      - type: paragraph
        content: |
          Most of the statistical summary functions in R have the argument `na.rm`. This stands for `NA` remove. The `NA` value is how R represents a missing value, similar to the NULL value in a SQL database.
      - type: paragraph
        content: |
          For example, there is a built-in data frame in R called `airquality` with daily measurements from a monitor in New York from 1973 (see `?airquality`). If we load the data frame using the `data()` function and take a look at the top 6 rows using the `head()` function, we can see some missing values represented as `NA`.
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.lines: 5
          exercise.cap: "Inspect `airquality` Data"
        content: |
          data("airquality")
          head(airquality)
      - type: paragraph
        content: |
          The `mean()` function, for example, has the argument `na.rm` set to `FALSE`. This means that the `NA` values will not be removed from the vector for which it is calculating the mean. As a result, it will return an `NA` because it cannot properly calculate the average. Here we use the `Ozone` column from the `airquality` data frame.
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.lines: 5
          exercise.cap: "Mean with NA Values"
        content: |
          mean(airquality$Ozone)
      - type: paragraph
        content: |
          To get the mean value, we set `na.rm = TRUE`.
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.lines: 5
          exercise.cap: "Mean with NA Removal"
        content: |
          mean(airquality$Ozone, na.rm = TRUE)
  - type: section
    title: Packages
    content:
      - type: paragraph
        content: |
          R comes with basic functionality, meaning that some functions will always be available when you start an R session. But anyone can write functions for R that are not part of the base functionality and make it available to other R users in a package.
      - type: paragraph
        content: |
          Packages must be installed on your computer first then loaded before using it. This is similar to a mobile app: you must first install the R package (like first downloading an app) then you must load the package before using its functions (like opening an app to use it).
      - type: paragraph
        content: |
          If base R doesn't have a function you need, the best thing to do is a Google search. Use a search with key words describing what you want the function to do and just add "R package" at the end.
      - type: paragraph
        content: |
          For example, if you wanted to find serial correlation in an environmental data set, Google would tell you that the R package `EnvStats` has a function called `serialCorrelationTest()`.
      - type: paragraph
        content: |
          First, you might try to use the function.
      - type: code
        language: r
        options:
          error: true
        content: |
          x <- c(1.3, 3.5, 2.6, 3.4, 6.4)
          serialCorrelationTest(x)
      - type: paragraph
        content: |
          It's not available because we need to install the package first (again, like initially downloading an app).
      - type: paragraph
        content: |
          In the bottom right panel of RStudio, click on the "Packages" tab then click "Install Packages" in the tool bar.
      - type: image
        src: "images/rstudio_install_package.png"
        alt: "RStudio Install Packages tab"
      - type: paragraph
        content: |
          A window will pop up. Start typing "EnvStats" into the "Packages" box, select that package, and click "Install".
      - type: image
        src: "images/rstudio_install_package2.png"
        alt: "RStudio package installation window for EnvStats"
      - type: paragraph
        content: |
          Now that we've installed the package, we still can't use the function we want. We need to load the package first (opening the app). We use the `library()` function to do this.
      - type: code
        language: r
        options:
          exercise: true
          exercise.eval: false
          exercise.cap: "Use `serialCorrelationTest` from EnvStats"
        content: |
          library(EnvStats)

          x <- c(1.3, 3.5, 2.6, 3.4, 6.4)
          serialCorrelationTest(x)
      - type: paragraph
        content: |
          Here is a link to a page that lists many useful packages for environmental data analysis: https://cran.r-project.org/web/views/Environmetrics.html
      - type: paragraph
        content: |
          Remember, when you close down RStudio, then start it up again, you don’t have to download the package again. But you do have to use the `library()` function to load the package before you can use any function that's not in the R core functionality (this is very easy to forget).
  - type: section
    title: Importing Data
    content:
      - type: paragraph
        content: |
          R can import data from just about any format, including

          - CSV,
          - Excel,
          - Databases, and
          - GIS shapefiles.

          This section will demonstrate how to import CSV and Excel files.
      - type: section
        title: CSV
        content:
          - type: paragraph
            content: |
              R has a built-in function called `read.csv()` for reading `.csv` files. Download the `chicago_daily.csv` file [here](https://github.com/LADCO/training-r-intro/blob/main/data/chicago_daily.csv) and save it to your working directory. If you don't know what your working directory is, run this code in R and it will tell you.
          - type: code
            language: r
            options:
              eval: false
            content: |
              getwd()
          - type: paragraph
            content: |
              Use `read.csv()` by providing the location and name of the file as the first argument. If the file is in your working directory, simply supply the name of the file. Below, the data from the file is read into R and saved as a data frame, which is the data type for storing tables. The function `head()` will show the first few lines.
          - type: code
            language: r
            options:
              eval: false
            content: |
              chicago_daily <- read.csv("chicago_daily.csv")
              head(chicago_daily)
      - type: section
        title: Excel
        content:
          - type: paragraph
            content: |
              There are several packages that can be used to import data from an Excel file, such as `xlsx`, `XLConnect`, and `readxl`. In this example, we'll use the `readxl` package. If you do not have the package installed, you can use RStudio to install as described in the section above on packages. You can also use the function `install.packages( )`.
          - type: code
            language: r
            options:
              eval: false
            content: |
              install.packages("readxl")
          - type: paragraph
            content: |
              Once you have the package installed, remember to load the package by using the `library()` function.
          - type: code
            language: r
            content: |
              library(readxl)
          - type: paragraph
            content: |
              Use the `read_excel()` function from the `readxl` package to read emissions data from [this Excel workbook](https://github.com/LADCO/training-r-intro/blob/main/data/emissions_IL_2022.xlsx). Download the file to your working directory and read the first worksheet (named "UNIT_DATA"), skipping the first 6 rows.
          - type: code
            language: r
            options:
              exercise: true
              exercise.eval: false
              exercise.lines: 5
              exercise.cap: "Read and Inspect Excel Data"
            content: |
              library(readxl)
              emissions <- read_excel("./data/emissions_IL_2022.xlsx", sheet = "UNIT_DATA", skip = 6)
              head(emissions)
exercises:
  - instructions: "Use the `seq()` function to create a vector from 1 to 20 by 2. For help with the parameters, run `?seq()` in the console and consult the documentation."
    hints:
      - "# To create a sequence, use the `seq()` function with `from`, `to`, and `by` parameters."
      - "# `from` specifies the starting number, `to` the ending number, and `by` how much to increment. For example, `seq(from = 1, to = 20, by = 2)`."
    solution:
      explanation: |
        In the `seq()` function, set `by = 2` to increment the sequence by 2, starting from 1 and ending at 20. This creates a sequence of all odd numbers from 1 to 19.
      code: |
        seq(from = 1, to = 20, by = 2)
  - instructions: "Use the `round( )` to round the number 13.5678 to two digits after the decimal point."
    hints:
      - "# Use the `round()` function with the number as the first argument and the number of decimal places as the second argument."
      - "# To round 13.5678 to two decimal places, use `round(13.5678, digits = 2)`."
    solution:
      explanation: |
        Set the `digits` parameter to 2 in the `round()` function to round the number to two decimal places. This changes 13.5678 to 13.57.
      code: |
        round(13.5678, digits=2)
  - instructions: "Concatenate the strings \"Hello\" and \"R\" using the `paste()` function."
    hints:
      - "# Use the `paste()` function to combine two or more strings. The strings are separated by a space by default."
      - "# For example, to concatenate \"Hello\" and \"R\", use `paste(\"Hello\", \"R\")`."
    solution:
      explanation: |
        Using the `paste()` function, we can concatenate "Hello" and "R" into a single string "Hello R". By default, `paste()` separates the strings with a space.
      code: |
        paste("Hello", "R")
  - instructions: "Sum the numbers 1 through 10 using the `sum()` function."
    hints:
      - "# Create a sequence of numbers using `:` operator. For example, `1:10` creates numbers from 1 to 10."
      - "# Then, use the `sum()` function with the sequence to calculate the total sum."
    solution:
      explanation: |
        By using the `:` operator, we create a sequence of integers from 1 to 10. Placing this sequence inside the `sum()` function calculates the total sum of these numbers.
      code: |
        sum(1:10)
  - instructions: "Read in the first 10 rows of the `chicago_daily.csv` file [here](https://github.com/LADCO/training-r-intro/blob/main/data/chicago_daily.csv)."
    hints:
      - "# Use the `read.csv()` function to read in CSV files. Specify the file path and use `nrows` to limit the number of rows read."
      - "# To read the first 10 rows, set `nrows = 10` in the `read.csv()` function."
    solution:
      explanation: |
        First, ensure the `chicago_daily.csv` file is saved in your working directory. Then, by using the `read.csv()` function with the `nrows` parameter set to 10, we can read only the first 10 rows of the file.
      code: |
        read.csv("chicago_daily.csv", nrows = 10)
