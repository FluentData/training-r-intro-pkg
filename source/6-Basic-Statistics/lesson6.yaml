title: "Basic Statistics"
metadata:
  author: Fluent Data, LLC
  date: "`r Sys.Date()`"
  description: |
    This lesson introduces basic statistical analysis in R, covering descriptive statistics, measures of central tendency and dispersion, statistical tests like the t-test and Shapiro-Wilk test for normality, correlation analysis with the cor() and cor.test() functions, and visualization of relationships between variables using pairwise plots.
lesson:
  number: 6
  id: 6-Basic-Statistics
  next: 7-Quality-Assurance
content:
  - type: section
    title: Introduction
    content:
      - type: paragraph
        content: |
          R was originally developed as a statistical programming language and its built-in functions are commonly used for basic statistics. There are also many community developed packages that make it easy to perform statistical analyses. This tutorial will cover descriptive statistics functions and some statistical tests that might be used on environmental data.
  - type: section
    title: Prerequisites
    content:
      - type: paragraph
        content: |
          This lesson assumes you are familiar with the material in the lesson on Functions and Importing Data.

          Statistical functions are used in this lesson that require installation of the `envstats` package.
      - type: code
        language: r
        options:
          eval: false
        content: |
          install.packages("envstats")
      - type: paragraph
        content: |
          The data used throughout these lessons is available from this package.
  - type: section
    title: Descriptive Statistics
    content:
      - type: paragraph
        content: |
          R has many built-in functions for descriptive statistics. We will use
          these functions to understand the ozone data in the `chicago_air` data
          frame.
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Extract example data"
        content: |
          data("chicago_air")

          ozone <- chicago_air$ozone
      - type: paragraph
        content: |
          Most of the functions we'll be using have an argument named `na.rm` that stands
          for `NA` remove. If the argument is set to `TRUE` then the function will remove
          all missing values from the data set. Otherwise, the function will error.

          These functions tell us the range of the data values, i.e., the highest and
          lowest values.
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Find minimum value"
        content: |
          min(ozone, na.rm=TRUE)
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Find maximum value"
        content: |
          max(ozone, na.rm=TRUE)
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Find range of values"
        content: |
          range(ozone, na.rm=TRUE)
      - type: paragraph
        content: |
          We can also get the mean and the quartile values from the `summary()` function.
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Summary statistics"
        content: |
          summary(ozone)
      - type: paragraph
        content: |
          The `IQR()` function gives us the interquartile range, which lets us know how large
          the spread is for the values in the central range of the distribution, i.e. between
          the 25th percentile and the 75th percentile.
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Calculate IQR"
        content: |
          IQR(ozone, na.rm=TRUE)
      - type: paragraph
        content: |
          We can use the `boxplot()` function to visualize the interquartile range. The outline
          of the box itself shows the middle 50% of the data, while the line in the middle
          of the box shows the median.
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Visualize IQR with boxplot"
        content: |
          boxplot(ozone)
  - type: section
    title: Measures of Central Tendency and Dispersion
    content:
      - type: paragraph
        content: |
          R has functions for finding the mean and median of a set of values.
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Calculate mean"
        content: |
          mean(ozone, na.rm=TRUE)
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Calculate median"
        content: |
          median(ozone, na.rm=TRUE)
      - type: paragraph
        content: |
          The functions `var()` and `sd()` calculate the variance and standard
          deviation, respectively.
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Calculate variance"
        content: |
          var(ozone, na.rm=TRUE)
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Calculate standard deviation"
        content: |
          sd(ozone, na.rm=TRUE)
  - type: section
    title: Statistical Tests
    content:
      - type: paragraph
        content: |
          R has many built-in functions for statistical tests. As an example, we'll
          use the `t.test()` function to perform a two sample t-test on the Chicago
          ozone data.

          First, let's visualize our dataset.
      - type: code
        language: r
        options:
          warning: false
          message: false
          exercise: false
          eval: true
          exercise.cap: "Visualize dataset"
        content: |
          library(ggplot2)

          ggplot(chicago_air, aes(factor(month), ozone)) + geom_boxplot()
      - type: paragraph
        content: |
          We could compare ozone months in July and October and see if there is
          a significant difference in concentrations. Below is a plot of those two
          months side by side.
      - type: code
        language: r
        options:
          warning: false
          message: false
          exercise: false
          eval: true
          exercise.cap: "Compare two groups"
        content: |
          library(dplyr)

          ozone_july_october <- filter(chicago_air, month == 7 | month == 10)

          ggplot(ozone_july_october, aes(factor(month), ozone)) + geom_boxplot()
      - type: paragraph
        content: |
          We should also check for normality before doing any statistical tests. Below
          are histograms of the datasets.
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Check for normality with histograms"
        content: |
          ggplot(ozone_july_october, aes(ozone)) +
            facet_grid(rows = "month") +
            geom_histogram()
      - type: paragraph
        content: |
          If plotting does not obviously show normality, we can use the built-in function
          `shapiro.test()`. This function performs the Shapiro-Wilk test on a dataset, which
          assumes that the dataset is normal. So the null hypothesis is that the dataset
          comes from a normal distribution. If the p-value of the test is less than .05,
          we reject the null hypothesis and conclude the data is not normal.
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Shapiro-Wilk test for Group1"
        content: |
          chicago_july <- filter(chicago_air, month == 7)

          shapiro.test(chicago_july$ozone)
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Shapiro-Wilk test for Group2"
        content: |
          chicago_october <- filter(chicago_air, month == 10)

          shapiro.test(chicago_october$ozone)
      - type: paragraph
        content: |
          The p-values for the tests are well above 0.05, so we assume the null
          hypothesis is true. Meaning, we can assume the distributions of ozone
          in the two months are normal.

          Now we can do some comparisons between these 2 months of measurements
          using the Student's t-test. The test is meant to determine if the two
          means from the two datasets are from the same distribution or not. The
          assumption, or null hypothesis, is that they are in fact mean values from
          the same distribution.
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Students t test between two groups"
        content: |
          t.test(chicago_july$ozone, chicago_october$ozone)
      - type: paragraph
        content: |
          The `t.test()` output shows a p-value well below .05, so we reject the null hypothesis.
          Meaning, the two means are not from the same distribution, and we can consider the
          two data sets significantly different in that sense.
  - type: section
    title: Other Statistical Tests
    content:
      - type: paragraph
        content: |
          Below is a reference table of a few popular tests for categorical data analysis in R.
      - type: table
        header:
          - "test"
          - "function"
        rows:
          - - "Chi Square Test"
            - "`chisq.test()`"
          - - "Fisher's Test"
            - "`fisher.test()`"
          - - "Analysis of Variance"
            - "`aov()`"
      - type: paragraph
        content: |
          The `EnvStats` package has a comprehensive list of basic and more advanced statistical
          tests for Environmental Data.
      - type: code
        language: r
        options:
          eval: false
        content: |
          library(EnvStats)

          ?FcnsByCatHypothTests
  - type: section
    title: Correlation Analysis
    content:
      - type: paragraph
        content: |
          If we are interested in how closely the variables in our dataset are related
          to each other, we can perform a correlation analysis.

          A correlation matrix tells us how positively or negatively correlated each variable
          is to the other variables. Below, we use the `cor()` function to print a correlation
          matrix of the numeric columns in the `chicago_air` data frame, specifying in the
          arguments that we only want to include complete observations and the Pearson method
          of finding correlations.
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Correlation matrix of select variables"
        content: |
          data(chicago_air)

          cor(chicago_air[, c("ozone", "temp", "pressure")],
              use = "complete.obs",
              method ="pearson")
      - type: paragraph
        content: |
          Along the diagonal, the correlation value is 1, because each variable
          is perfectly correlated with itself. The closer the other values are to
          1 or -1, the more correlated the two variables are. A correlation value
          of 0 means the two variables are not correlated at all. The matrix above
          shows a weak correlation between ozone and temperature, a weak negative
          correlation between air pressure and temperature, and no correlation between
          ozone and air pressure.

          We could also perform a correlation test using the `cor.test()` function.
          Here we test the correlation between ozone and temperature.
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Test correlation between two variables"
        content: |
          cor.test(chicago_air$ozone, chicago_air$temp, method = "pearson")
      - type: paragraph
        content: |
          The null hypothesis of the test is that the correlation is 0, there is
          no correlation at all. The p-value is well below .05 so we reject the
          null hypothesis and conclude that ozone and temperature are correlated
          to some degree.

          Running the test between ozone and air pressure gives a p-value above
          .05 so we do not reject the null hypothesis. We conclude there is no
          correlation between ozone and air pressure.
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Test correlation between another set of two variables"
        content: |
          cor.test(chicago_air$ozone, chicago_air$pressure, method = "pearson")
      - type: paragraph
        content: |
          It's also useful to see pairwise plots for numeric values to see the
          relationships between the variables. The built in `pairs()` function will
          display a scatter plot between each pair of columns in the data frame.
          Setting `lower.panel = panel.smooth` will draw a smooth line through the
          scatter plots on the lower panels.
      - type: code
        language: r
        options:
          exercise: false
          eval: true
          exercise.cap: "Pairwise plots of select variables"
        content: |
          pairs(chicago_air[, c("ozone", "temp", "pressure")], lower.panel = panel.smooth)
      - type: paragraph
        content: |
          You can see from the lower panel plots the increasing slope of the line
          for ozone and temp; a decreasing slope for temp and pressure; and a flat
          line for ozone and pressure.
exercises:
  - instructions: "Find the mean and median of a specific column in the example data frame and compare the two values."
    hints:
      - "# Use the `mean()` function to calculate the mean of a specific column in a data frame. For example, `mean(data_frame$column_name)`."
      - "# Similarly, use the `median()` function to find the median: `median(data_frame$column_name)`."
      - "# To compare the mean and median, calculate the absolute difference between them using `abs(mean - median)`."
    solution:
      explanation: |
        Use the `mean()` and `median()` functions to calculate the mean and median of a specific column in the example data frame, respectively. To compare these two statistics, the absolute difference between them can be found using the `abs()` function. This comparison can help in understanding the distribution of the data.
      code: |
        column_mean <- mean(data$column)

        column_mean

        column_median <- median(data$column)

        column_median

        abs(column_mean - column_median)
  - instructions: "Use the Shapiro-Wilk normality test to see if a specific column in the example data frame is normally distributed."
    hints:
      - "# To perform a Shapiro-Wilk test, use the `shapiro.test()` function on the column of interest."
      - "# For a specific column in the example data frame, the syntax is `shapiro.test(data_frame$column)`."
      - "# Evaluate the p-value in the test's result to infer normality. A common threshold for normality is a p-value greater than .05."
    solution:
      explanation: |
        The Shapiro-Wilk normality test, applied with the `shapiro.test()` function, checks the hypothesis that a sample comes from a normally distributed population. In this case, applying it to a specific column in the example data frame provides a p-value, which, if above .05, suggests that the data can be considered normally distributed.
      code: |
        shapiro.test(data$column)
  - instructions: "Create a correlation matrix of the numeric columns in the built-in `airquality` data frame. Use `data(\"airquality\")` to load the data frame."
    hints:
      - "# First, load the `airquality` data frame into your R session using `data(\"airquality\")`."
      - "# Use the `cor()` function to calculate correlations among numeric columns. For selected columns, use `data_frame[, c(\"Column1\", \"Column2\")]`."
      - "# To handle missing values, add the argument `use = \"complete.obs\"` within the `cor()` function."
    solution:
      explanation: |
        To explore the relationships among the numeric variables in the `airquality` data frame, a correlation matrix can be generated using the `cor()` function. This matrix helps in identifying potential relationships between variables like Ozone, Solar.R, Wind, and Temp, considering only rows with complete observations.
      code: |
        data("airquality")

        cor(airquality[, c("Ozone", "Solar.R", "Wind", "Temp")],
            use = "complete.obs",
            method = "pearson")
  - instructions: "Create pairwise plots for all of the numeric columns in the `airquality` data frame. Have the lower-panel plots generate a smooth line representing relationship between the two variables."
    hints:
      - "# Use the `pairs()` function to create pairwise plots for selected numeric columns in a data frame."
      - "# To include a smooth line in the lower-panel plots, specify the argument `lower.panel = panel.smooth` in your `pairs()` function call."
      - "# Select the numeric columns you want to plot by using `data_frame[, c(\"Column1\", \"Column2\")]` syntax."
    solution:
      explanation: |
        Pairwise plots offer a comprehensive view of the relationships between all pairs of numeric variables in a dataset. In this case, applying the `pairs()` function to the `airquality` data frame, with the addition of a smooth line in the lower-panel plots using `panel.smooth`, provides insights into how variables like Ozone, Solar.R, Wind, and Temp interact with each other.
      code: |
        pairs(airquality[, c("Ozone", "Solar.R", "Wind", "Temp")], lower.panel = panel.smooth)
